/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghosti3.mcplugin.customplugin;

import java.net.MalformedURLException;
import java.util.Optional;
import java.util.logging.Logger;

import org.bukkit.plugin.PluginLogger;
import org.bukkit.plugin.java.JavaPlugin;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import ghosti3.mcplugin.customplugin.disco.DiscordPush;

public class CustomPlugin extends JavaPlugin {
    private static CustomPlugin instance = null;
    public static Logger plLogger = PluginLogger.getLogger("CustomPlugin");

    private Settings settings;
    private DiscordPush sender;

    @Override
    public void onEnable() {
        CustomPlugin.instance = this;
        this.saveDefaultConfig();
        settings = Settings.fromFileConfig(getConfig());

        try {
            sender = new DiscordPush(settings.webhookUrl);
        } catch (MalformedURLException e) {
            plLogger.severe("Bad WEBHOOK_URL.");
            getServer().getPluginManager().disablePlugin(this);
            return;
        }

        plLogger.info("Registering custom events");
        getServer().getPluginManager().registerEvents(new CustomEventListener(), this);

        sender.build(DiscordPush.MsgTypes.ServerOnline).send();
    }

    @Override
    public void onDisable() {
        if (sender != null)
            sender.build(DiscordPush.MsgTypes.ServerOffline).send();

        CustomPlugin.instance = null;
    }

    @NotNull
    public Settings getSettings() {
        return settings;
    }

    /**
     * Returns possible instance of initialised plugin.
     *
     * @return possible reference to {@link CustomPlugin} active instance
     */
    @Nullable
    public static Optional<CustomPlugin> getInstance() {
        return Optional.ofNullable(instance);
    }
}
