/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghosti3.mcplugin.customplugin;

import ghosti3.mcplugin.customplugin.disco.DiscordPush;
import java.net.MalformedURLException;
import java.util.Optional;
import java.util.logging.Logger;
import org.bukkit.plugin.java.JavaPlugin;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

public class CustomPlugin extends JavaPlugin {
  private static CustomPlugin instance = null;

  private Settings settings;
  private Logger logger = null;
  private DiscordPush sender = null;

  @Override
  public void onEnable() {
    CustomPlugin.instance = this;
    logger = getLogger();
    this.saveDefaultConfig();
    settings = Settings.fromFileConfig(getConfig());

    try {
      sender = new DiscordPush(settings.webhookUrl, logger);
    } catch (MalformedURLException e) {
      logger.severe("Bad WEBHOOK_URL.");
      getServer().getPluginManager().disablePlugin(this);
      return;
    }

    logger.info("Registering custom events");
    getServer().getPluginManager().registerEvents(new CustomEventListener(this),
                                                  this);

    sender.send(DiscordPush.SERVER_ONLINE);
  }

  @Override
  public void onDisable() {
    if (sender != null) {
      sender.send(DiscordPush.SERVER_OFFLINE);
    }

    CustomPlugin.instance = null;
  }

  @NotNull
  public Settings getSettings() {
    return settings;
  }

  @NotNull
  public DiscordPush getSender() {
    return sender;
  }

  /**
   * Returns possible instance of initialised plugin.
   *
   * @return possible reference to {@link CustomPlugin} active instance
   */
  @Nullable
  public static Optional<CustomPlugin> getInstance() {
    return Optional.ofNullable(instance);
  }
}
